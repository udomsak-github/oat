   lua_package_path '/usr/local/share/lua/5.3/?.lua;;';
   lua_shared_dict discovery 1m;
   lua_shared_dict jwks 1m;
   #lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
   lua_ssl_trusted_certificate /etc/letsencrypt/live/es-test.grouplease.co.th/fullchain.pem;

   upstream upstream_server {
        server  172.255.152.108:9200      max_fails=3 fail_timeout=30s;
   }

   server {
        listen       80;
        listen       443  ssl;
        server_name  es-test.grouplease.co.th;
        proxy_intercept_errors off;
    ssl_certificate /etc/letsencrypt/live/es-test.grouplease.co.th/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/es-test.grouplease.co.th/privkey.pem; # managed by Certbot
        server_tokens             off;

        access_log  /var/log/nginx/access-open.log;
        error_log  /var/log/nginx/open.error.log;

        root   /var/www/html;

        #lua_code_cache off;
        #There is a bug I found with sessions not sticking properly and causing spontaneous 403's
        #For now, set the session secret hard-coded
        #set $session_secret 723p4hR234t36VsCD8g565325IC0022G;

        access_by_lua '
          local opts = {
            redirect_uri_path = "/redirect_uri",
            accept_none_alg = true,
            discovery = "https://auth.grouplease.co.th/auth/realms/customer-inquiry/.well-known/openid-configuration",
            client_id = "elasticsearch",
            client_secret = "d0564d61-9be7-43f4-a0be-75e6db5b5bc0",
            ssl_verify = "no",
            redirect_uri_scheme = "https",
            logout_path = "/logout",
            redirect_after_logout_uri = "https://auth.grouplease.co.th/auth/realms/dealer-portal-staging/protocol/openid-connect/logout",
            redirect_after_logout_with_id_token_hint = false,
            session_contents = {id_token=true}
          }
          local res, err = require("resty.openidc").authenticate(opts)

          if err then
            ngx.status = 403
            ngx.say(err)
            ngx.exit(ngx.HTTP_FORBIDDEN)
          end
        ';

        location / {
           #proxy_set_header        Host $host;
	   #proxy_set_header Content-Length "";
   	   #proxy_set_header X-Original-URI $request_uri;
    	   #proxy_set_header Authorization $http_authorization;
	   #proxy_pass_header Authorization;
	   #proxy_set_header Authorization "Bearar $token";
	   access_by_lua_file /etc/nginx/conf.d/bearer.lua;
           proxy_pass http://upstream_server;
        }
	        location /secure/ {
            access_by_lua_file /etc/nginx/conf.d/bearer.lua;

            default_type text/plain;
            echo "<p>i am protected by jwt<p>";
        }
   
}
